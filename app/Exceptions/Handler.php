<?php

namespace App\Exceptions;

use Illuminate\Database\Eloquent\ModelNotFoundException;
use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler;
use Illuminate\Validation\ValidationException;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Throwable;

class Handler extends ExceptionHandler
{
    /**
     * The list of the inputs that are never flashed to the session on validation exceptions.
     *
     * @var array<int, string>
     */
    protected $dontFlash = [
        'current_password',
        'password',
        'password_confirmation',
    ];

    /**
     * Register the exception handling callbacks for the application.
     */
    public function register(): void
    {
        $this->reportable(function (Throwable $e) {
            //
        });
    }

    public function render($request, Throwable $e)
    {
//        return parent::render($request, $e); // TODO: Change the autogenerated stub
        $return = [];
        $message = $e->getMessage();
        $code = $e->getCode();

//        dd($message);
//        dd(get_class($e));

        switch (get_class($e)) {
            case ValidationException::class:
                if ($err = json_decode($message)) {
                    $code = $err->code;
                    $message = $err->message;
                } else {
                    $code = 422;
                    $message = 'data cannot be processed';
                }
                break;
            case NotFoundHttpException::class:
            case ModelNotFoundException::class:
                $code = 404;
                $message = 'not found';
                break;
        }
//        dd($message);
        if ($message[strlen($message) - 1] == ")") $message = substr($message, 0, strlen($message) - 19);

        $return['message'] = $message;
        if (isset($e->data)) $return['data'] = $e->data;
        return response()->json($return, $code);
    }
}
